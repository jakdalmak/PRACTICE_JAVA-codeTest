class Solution {
    public int solution(int a, int b) {
        
        /*
        기약분수 == 더이상 약분 불가능한 분수.
        a가 더이상 b로 나누어지지 않는 수여야 함.
        분모 b의 소인수가 2와 5만 존재해야함.
        
        1. 기약분수로 변환 수행해야함. -> 약분 알고리즘 필요
        
        2. 분모에 대한 소인수분해 알고리즘 필요
        
        3. 얻은 소인수 중 2와 5가 아닌 소인수 있으면 즉시 소인수 분해 알고리즘 종료하고 2 반환
           아니면 1 반환
        */
        
        
        
        
        /* 1번. 약분 수행하기 */
        // 약분은 최대 공약수로 두 수를 나누는 것으로 해결 가능.
        // 최대 공약수를 구해야 한다...
        // 약분을 하지 않아도 되는 경우도 생각해야함.
        // => 유클리드 알고리즘은 약분이 '가능한' 대상 기준으로 작성되었음. 사용 불가.
        
        // 기약분수를 구하는 알고리즘.
        // 분모와 분자 중 더 작은 값을 기준으로 1까지 줄여가며 둘 다 나누어지는 경우 그 값으로 나누기.
        for(int i = a; i > 0; i--) {
            if(a % i == 0 && b % i == 0) {
                a /= i;
                b /= i;
            }
        }


        /* 2번. 분모 소인수 분해 수행하기 */
        // 소인수 분해 수행 도중에 2나 5가 아닌 값이 나오면 즉시 return하도록 별도 작성하기.
        return FactorizationCheck(b);
    }
    
        
    /** 주어진 값을 소인수분해 하는 함수 */
    // => 소인수분해를 모두 할 필요 없이, '2와 5가 아닌 값이 나오는 경우'를 찾으면 됨.
    public int FactorizationCheck(int b) {
        int num = 2;
        
        while(b % 2 == 0) {
            b /= 2;
        }
        
        while(b % 5 == 0) {
            b /= 5;
        }
        
        return (b == 1) ? 1 : 2;
        
        /*
        while(num <= b) {
            if(b % num == 0) {
                b /= num;
                
                if(num != 2 && num != 5) {
                    return 2;
                }
            }
        }
        */
    }
}